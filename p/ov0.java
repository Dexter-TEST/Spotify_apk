package p.ov0;
import com.spotify.connectivity.auth.LoginControllerDelegate;
import p.pv0;
import com.spotify.connectivity.eventsenderanalyticsdelegate.EventSenderAnalyticsDelegate;
import com.spotify.connectivity.auth.NativeLoginControllerConfiguration;
import com.spotify.connectivity.AuthenticatedScopeConfiguration;
import p.bn3;
import com.spotify.clientfoundations.core.corefullimpl.FullAuthenticatedScopeConfiguration;
import com.spotify.clientfoundations.core.corelimitedimpl.LimitedAuthenticatedScopeConfiguration;
import java.lang.Object;
import p.co5;
import p.tw0;
import com.spotify.clientfoundations.concurrency.async.Scheduler;
import com.spotify.connectivity.sessionservice.DefaultSharedNativeSession;
import com.spotify.connectivity.auth.NativeSession;
import com.spotify.connectivity.connectivityservice.ConnectivityService;
import p.sw0;
import com.spotify.connectivity.sessionservice.SessionService;
import com.spotify.connectivity.sessionservice.TemporarySessionLoginFlowDependencies$LegacyFlow;
import com.spotify.connectivity.sessionapi.SharedNativeSession;
import com.spotify.connectivity.connectivityapi.ConnectivityApi;
import com.spotify.core.coreapi.CoreApi;
import com.spotify.core.coreservice.CoreService;
import com.spotify.connectivity.sessionservice.TemporarySessionLoginFlowDependencies;
import com.spotify.connectivity.AnalyticsDelegate;
import p.vg0;
import com.spotify.connectivity.connectivitysessionservice.ConnectivitySessionService;
import p.c0;
import p.re6;
import com.spotify.connectivity.sessionapi.SessionApi;
import com.spotify.connectivity.logoutanalyticsdelegate.AuthAnalyticsDelegate;
import com.spotify.connectivity.pubsub.PubSubClient;
import p.r45;
import p.he7;
import p.ge7;
import p.tv;
import java.lang.String;
import java.io.File;
import p.df6;
import p.fv1;
import com.spotify.core.corefullsessionservice.CoreFullSessionService;
import p.lv0;
import p.mv0;
import p.nv0;
import io.reactivex.rxjava3.core.Observable;
import p.pw0;
import p.lt5;
import p.cf6;
import com.spotify.connectivity.connectivitysessionapi.ConnectivitySessionApi;
import p.tc6;
import p.xq3;
import p.fe7;
import p.gh5;
import com.spotify.core.corelimitedsessionservice.CoreLimitedSessionService;
import java.lang.IllegalStateException;

public final class ov0 implements LoginControllerDelegate	// class@002196 from classes.dex
{
    public final pv0 a;
    public final EventSenderAnalyticsDelegate b;
    public final NativeLoginControllerConfiguration c;
    public final AuthenticatedScopeConfiguration d;
    public final bn3 e;
    public final FullAuthenticatedScopeConfiguration f;
    public final LimitedAuthenticatedScopeConfiguration g;

    public void ov0(pv0 p0,EventSenderAnalyticsDelegate p1,NativeLoginControllerConfiguration p2,AuthenticatedScopeConfiguration p3,bn3 p4,FullAuthenticatedScopeConfiguration p5,LimitedAuthenticatedScopeConfiguration p6){
       this.a = p0;
       this.b = p1;
       this.c = p2;
       this.d = p3;
       this.e = p4;
       this.f = p5;
       this.g = p6;
       super();
    }
    public final void onLogin(){
       pv0 l;
       pv0 s;
       pv0 t;
       pv0 n2;
       ov0 oov0 = this;
       ov0 a = oov0.a;
       pv0 k = a.k;
       co5.i(k);
       if (!k.a.isCurrentThread()) {
          throw new IllegalStateException("onLogin should always be called on the core thread");
       }
       pv0 n = a.n;
       co5.i(n);
       pv0 k1 = a.k;
       co5.i(k1);
       DefaultSharedNativeSession k2 = new DefaultSharedNativeSession(n.adoptNativeSession(), k1);
       a.q = k2;
       TemporarySessionLoginFlowDependencies$LegacyFlow legacyFlow = new TemporarySessionLoginFlowDependencies$LegacyFlow(k2);
       pv0 k3 = a.k;
       co5.i(k3);
       k = a.n;
       co5.i(k);
       ConnectivityApi api = k.getApi();
       k = a.p;
       co5.i(k);
       SessionService n1 = new SessionService(legacyFlow, k3, oov0.b, api, k.getApi(), oov0.c, a.b);
       a.o = n;
       pv0 k4 = a.k;
       co5.i(k4);
       pv0 m = a.m;
       co5.i(m);
       n = a.n;
       co5.i(n);
       pv0 o = a.o;
       co5.i(o);
       ConnectivitySessionService k5 = new ConnectivitySessionService(k4, m, n, oov0.b, oov0.d, o, null, null, c0.a);
       a.r = k;
       n = a.o;
       co5.i(n);
       ov0 e = oov0.e;
       String absolutePath = e.a.i.getAbsolutePath();
       co5.l(absolutePath, "corePaths.cacheDir.absolutePath");
       String absolutePath1 = e.b.getAbsolutePath();
       co5.l(absolutePath1, "corePaths.settingsDir.absolutePath");
       a.u = new he7(n, new ge7(absolutePath, absolutePath1));
       String str = "empty\(\)";
       if (a.j != null) {
          a.t = new df6(new fv1());
          o = a.k;
          co5.i(o);
          k3 = a.m;
          co5.i(k3);
          l = a.l;
          co5.i(l);
          s = a.s;
          co5.i(s);
          t = a.t;
          co5.i(t);
          n2 = a.n;
          co5.i(n2);
          pv0 p = a.p;
          co5.i(p);
          pv0 r = a.r;
          co5.i(r);
          k4 = a.o;
          co5.i(k4);
          k1 = a.u;
          co5.i(k1);
          Observable observable = Observable.empty();
          co5.l(observable, str);
          CoreFullSessionService k6 = new CoreFullSessionService(o, k3, l, s, t, n2, p, r, k4, new lv0(), new mv0(), k1, oov0.f, new nv0(), observable);
          int i = this;
       }else {
          pv0 k7 = a.k;
          co5.i(k7);
          k1 = a.m;
          co5.i(k1);
          pv0 l1 = a.l;
          co5.i(l1);
          o = a.s;
          co5.i(o);
          k3 = a.n;
          co5.i(k3);
          l = a.p;
          co5.i(l);
          s = a.r;
          co5.i(s);
          t = a.o;
          co5.i(t);
          n2 = a.u;
          co5.i(n2);
          Observable observable1 = Observable.empty();
          co5.l(observable1, str);
          CoreLimitedSessionService k8 = new CoreLimitedSessionService(k7, k1, l1, o, k3, l, s, t, n2, this.g, observable1);
       }
       a.v = k;
       return;
    }
    public final void onLogout(){
       pv0.a(this.a);
    }
}

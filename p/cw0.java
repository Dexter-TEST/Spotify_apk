package p.cw0;
import p.ow0;
import p.dt5;
import p.q05;
import p.m73;
import p.k73;
import p.o05;
import java.lang.Object;
import android.content.Context;
import p.gv0;
import p.wn3;
import com.spotify.connectivity.connectiontype.ConnectionApis;
import p.qv0;
import p.jv0;
import p.iv0;
import p.we6;
import p.mt6;
import p.a25;
import p.al5;
import p.oo;
import p.ag0;
import p.lp3;
import p.t05;
import p.eo;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import p.s36;
import p.vw1;
import java.util.concurrent.Executor;
import p.c0;
import p.t00;
import p.h94;
import java.lang.String;
import p.bw0;
import p.aw6;
import p.jl;
import p.r45;
import java.lang.Boolean;
import p.an3;
import java.lang.Class;
import p.cl0;
import java.util.concurrent.TimeUnit;
import java.util.Objects;
import p.ml0;
import io.reactivex.rxjava3.core.CompletableSource;
import io.reactivex.rxjava3.core.Scheduler;
import p.v05;
import p.ir0;
import p.fl0;
import io.reactivex.rxjava3.core.Completable;
import p.jw0;
import p.jk0;
import p.km3;
import p.vp;
import p.bt3;
import io.reactivex.rxjava3.core.Observable;
import p.ab0;
import p.bi5;
import p.l94;
import p.yf2;
import p.zm3;
import p.ym3;
import p.b5;
import p.ok0;
import p.rp;
import p.al0;
import p.co5;
import p.lb;
import p.lw0;
import p.ks3;
import io.reactivex.rxjava3.disposables.Disposable;
import p.fn0;
import p.tv0;
import p.kz6;
import p.ep3;
import p.vo0;
import com.spotify.connect.esperanto.proto.ConnectMessages$StateRequest;
import com.google.protobuf.c;
import com.google.protobuf.b;
import p.xr1;
import p.s74;
import com.spotify.clientfoundations.esperanto.esperanto.ClientBase;
import p.pp;
import p.wr1;
import p.wp3;
import p.tn6;
import p.ko1;
import p.rm;
import io.reactivex.rxjava3.core.ObservableSource;
import p.pg2;
import p.mw0;
import p.eq3;
import io.reactivex.rxjava3.core.Single;
import p.cq3;
import p.fw0;
import p.fx6;
import com.spotify.base.java.logging.Logger;
import com.spotify.player.esperanto.proto.EsGetErrorRequest$GetErrorRequest;
import p.os1;
import p.a05;
import p.ms1;
import p.ir2;
import p.qd4;
import p.an5;
import java.util.Map;
import java.util.Collections;
import p.el5;
import com.spotify.connectivity.productstateesperanto.ProductStateMethods;
import p.bm;
import p.w00;
import p.co6;
import p.nh3;
import p.bo6;
import p.rn6;
import io.reactivex.rxjava3.core.ObservableOnSubscribe;
import p.z15;
import p.t65;
import p.xe7;
import p.xb6;
import java.lang.Integer;
import io.reactivex.rxjava3.core.Maybe;
import p.xl6;
import p.vs3;
import com.spotify.offline_esperanto.proto.a;
import com.spotify.offline_esperanto.proto.EsOffline$GetContextsRequest;
import p.jq1;
import com.spotify.offline_esperanto.proto.EsOffline$ContextInfoPolicy;
import p.bs1;
import p.b05;
import p.as1;
import p.rp0;
import p.yv0;
import p.aw0;
import p.aq6;
import p.yp6;
import p.tk0;
import p.rk0;
import p.r05;
import com.google.common.collect.c;
import p.ys5;
import p.s05;
import p.c16;

public final class cw0 extends ow0	// class@00128a from classes.dex
{
    public final t00 I;
    public final h94 J;
    public final t05 K;
    public final t00 L;
    public static final q05 M;
    public static final m73 N;

    static {
       cw0.M = new q05(dt5.x);
       k73 ok73 = m73.a();
       ok73.d("downloading", o05.c);
       ok73.d("error", o05.C);
       o05 b = o05.B;
       ok73.d("exceeded", b);
       o05 a = o05.A;
       ok73.d("expired", a);
       ok73.d("no", o05.z);
       o05 b1 = o05.b;
       ok73.d("resync", b1);
       ok73.d("waiting", o05.t);
       ok73.d("waitingNoConnection", o05.v);
       ok73.d("waitingOfflineMode", o05.w);
       ok73.d("waitingSyncNotAllowed", o05.x);
       ok73.d("yes", o05.a);
       ok73.d("yes_waiting_for_resync", b1);
       ok73.d("yes_expired", a);
       ok73.d("waiting_limit_exceeded", b);
       cw0.N = ok73.b(true);
    }
    public void cw0(Context p0,gv0 p1,wn3 p2,ConnectionApis p3,qv0 p4,jv0 p5,iv0 p6,we6 p7,mt6 p8,a25 p9,al5 p10,oo p11,ag0 p12,lp3 p13,t05 p14,eo p15){
       super(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p13, new vw1(Executors.newSingleThreadExecutor(), false, false), p15);
       c0 a = c0.a;
       int i = this;
       i.I = t00.b(a);
       i.L = t00.b(a);
       i.J = new h94(0, p12);
       i.K = p14;
    }
    public static o05 A(String p0,String p1,bw0 p2,aw6 p3){
       o05 z = o05.z;
       if (p0 != null && p1 != null) {
          o05 oo05 = cw0.N.get(p1);
          int i = 1;
          boolean b = (oo05 != null)? true: false;
          Object[] objArray = new Object[i];
          objArray[0] = p1;
          jl.i(b, "Unknown value, %s", objArray);
          if (p2.d.c() && p0.equals(p2.d.b())) {
             oo05 = o05.y;
          }else if(oo05 == o05.t){
             if (p2.b != null) {
                oo05 = o05.w;
             }else if(p2.c != null){
                oo05 = o05.v;
             }else if(p3.get().booleanValue()){
                oo05 = o05.x;
             }
          }
          if (oo05 != null) {
             z = oo05;
          }
       }
       return z;
    }
    public final void u(){
       ow0 oow0 = this;
       ow0 o = oow0.o;
       o.getClass();
       cl0 a = cl0.a;
       TimeUnit sECONDS = TimeUnit.SECONDS;
       Scheduler b = s36.b;
       a.getClass();
       Objects.requireNonNull(sECONDS, "unit is null");
       Objects.requireNonNull(b, "scheduler is null");
       ml0 v8 = new ml0(a, 5, sECONDS, b);
       an3 a1 = o.a;
       CompletableSource[] uCompletable = new CompletableSource[]{a1.a.c.c().filter(new ab0(27)).map(new l94(16)).map(new l94(17)).distinctUntilChanged().subscribeOn(s36.c).map(new jw0(9)).flatMapCompletable(new zm3(o, new jk0(v8.f(new v05(8)), 4, new jw0(8)), 0)),a1.a().filter(new rp(28)).flatMapCompletable(new zm3(o, Completable.i(new ym3(o, 2)), 1))};
       mb g = co5.g;
       lb f = co5.f;
       ow0 v = oow0.v;
       v.c(new al0(uCompletable, 1).g(g, g, f, f, f, o.f).subscribe(new lw0(0), new ks3(2, "Error connecting authentication to Core player")));
       o = oow0.n;
       ow0 oow01 = o;
       ow0 x = oow0.x;
       Objects.requireNonNull(x);
       v.c(oow01.f().distinctUntilChanged().subscribe(new ep3(x, 2), new ep3(x, 4)));
       tv0 q = oow01.q;
       q.getClass();
       vo0 ovo0 = ConnectMessages$StateRequest.h();
       ovo0.d();
       ovo0.c();
       c uoc = ovo0.build();
       co5.l(uoc, "newBuilder\(\).apply {\n   …rue\n            }.build\(\)");
       xr1 a2 = q.a;
       a2.getClass();
       Observable observable = a2.callStream("spotify.connect.esperanto.proto.ConnectService", "State", uoc);
       observable = observable.map(new pp(5));
       co5.l(observable, "callStream\(\"spotify.conn…     }\n                }\)");
       observable = observable.map(wr1.a);
       co5.l(observable, "state.map {\n            …)\n            }\n        }");
       observable = observable.distinctUntilChanged();
       co5.l(observable, "esperantoConnectEndpoint…(\).distinctUntilChanged\(\)");
       ow0 y = oow0.y;
       Objects.requireNonNull(y);
       v.c(observable.map(new jw0(4)).distinctUntilChanged().subscribe(new ep3(y, 5), new ep3(y, 6)));
       oow01 = oow0.q;
       wp3 a3 = oow01.a;
       ow0 p = oow0.p;
       Objects.requireNonNull(o);
       v.c(Observable.combineLatest(oow01.a(), oow01.f.r(a3), p.getConnectionTypeObservable(), new rm(7)).map(new jw0(5)).switchMapCompletable(new mw0(o, 4)).subscribe());
       v.c(oow01.a().map(new jw0(6)).switchMapCompletable(new mw0(o, 0)).subscribe());
       v.c(Observable.combineLatest(oow01.g.r(a3), oow01.h.r(a3), p.getConnectionTypeObservable(), new rm(6)).switchMapCompletable(new mw0(o, 1)).subscribe());
       ow0 r = oow0.r;
       v.c(r.b().map(new cq3(r, 3)).flatMapCompletable(new fw0(oow0, 4)).subscribe());
       v.c(oow01.d.r(a3).switchMapCompletable(new mw0(o, 2)).subscribe());
       v.c(oow01.e.r(a3).switchMapCompletable(new mw0(o, 3)).subscribe());
       v.c(oow01.j.r(a3).map(new fx6(25)).switchMapCompletable(new fw0(oow0, 5)).subscribe());
       v.c(oow01.k.r(a3).switchMapCompletable(new fw0(oow0, 6)).subscribe());
       v.c(oow01.l.r(a3).switchMapCompletable(new fw0(oow0, 7)).subscribe());
       v.c(oow01.m.r(a3).switchMapCompletable(new fw0(oow0, 8)).subscribe());
       Object[] objArray = new Object[0];
       Logger.e("errors\(\)", objArray);
       tv0 c = o.c;
       c.getClass();
       EsGetErrorRequest$GetErrorRequest getErrorRequ = EsGetErrorRequest$GetErrorRequest.f();
       co5.l(getErrorRequ, "getDefaultInstance\(\)");
       os1 a4 = c.a;
       a4.getClass();
       Observable observable1 = a4.callStream("spotify.player.esperanto.proto.ContextPlayer", "GetError", getErrorRequ);
       observable1 = observable1.map(new a05(12));
       co5.l(observable1, "callStream\(\"spotify.play…     }\n                }\)");
       observable1 = observable1.map(ms1.a);
       co5.l(observable1, "playerClient.GetError\(Es…p\(::playerErrorFromProto\)");
       observable1 = observable1.map(ir2.V);
       co5.l(observable1, "playerSubscriptions.erro…(\"error\" to it.error\(\)\) }");
       oow01 = oow0.C;
       Objects.requireNonNull(oow01);
       v.c(observable1.filter(new rp(24)).map(new jw0(1)).filter(new rp(25)).cast(String.class).subscribe(new qd4(oow01, 1)));
       v.c(oow0.u.g().subscribe());
       oow01 = oow0.A;
       Objects.requireNonNull(oow01);
       v.c(o.l.a.values().onErrorReturnItem(Collections.emptyMap()).scan(new bm(11)).distinctUntilChanged().subscribe(new ep3(oow01, 3)));
       v.c(oow01.filter(new rp(26)).map(new jw0(2)).distinctUntilChanged().switchMapCompletable(new fw0(oow0, 9)).subscribe());
       v.c(oow01.flatMapCompletable(new fw0(oow0, 10)).subscribe());
       r = oow0.s;
       a25 b1 = r.b;
       b1.getClass();
       rn6 c1 = a25.c;
       co5.o(c1, "key");
       Observable observable2 = Observable.create(new nh3(b1, c1, bo6.b));
       co5.l(observable2, "create\(\n            KeyO…)\n            }\n        \)");
       CompletableSource[] uCompletable1 = new CompletableSource[]{observable2.filter(new pp(1)).flatMapCompletable(new z15(r, 0)),oow01.map(new jw0(12)).filter(new pp(2)).distinctUntilChanged().flatMapCompletable(new z15(r, 1))};
       v.c(Completable.l(uCompletable1).subscribe());
       objArray = new Object[0];
       Logger.e("currentSession\(\)", objArray);
       Maybe maybe = o.a.a(xe7.H(new t65("x-bypass-error", "true"))).map(new jw0(3)).distinctUntilChanged().scan(Integer.valueOf(0), new bm(12)).filter(new rp(27)).firstElement();
       maybe.getClass();
       v.c(new jk0(maybe, 5, new fw0(oow0, 11)).subscribe());
       v.c(this.v().map(new xl6(22)).distinctUntilChanged().filter(new rp(21)).subscribe(new vs3(20, oow0)));
       c = o.p;
       c.getClass();
       a uoa = EsOffline$GetContextsRequest.h();
       jq1 ojq1 = EsOffline$ContextInfoPolicy.g();
       ojq1.c(1);
       uoa.d(ojq1.build());
       c uoc1 = uoa.build();
       co5.l(uoc1, "newBuilder\(\).apply {\n   …d\(\)\n            }.build\(\)");
       observable1 = c.a.a(uoc1).map(new as1(c, 1));
       co5.l(observable1, "override fun resourcesWi…        }\n        }\n    }");
       Observable observable3 = Observable.combineLatest(observable1, o.j.a(), oow0.L, new rm(4));
       cw0 i = oow0.I;
       Objects.requireNonNull(i);
       v.c(observable3.map(new yv0(oow0, 2)).distinctUntilChanged().map(new xl6(25)).doOnTerminate(new aw0(oow0, 1)).subscribe(new ep3(i, 1)));
       observable3 = i.filter(new rp(22));
       v.c(observable3.map(new xl6(26)).map(new xl6(23)).distinctUntilChanged().switchMap(new xl6(24)).filter(new rp(20)).flatMapCompletable(new yv0(oow0, 1)).subscribe());
    }
    public final jk0 y(aq6 p0){
       Completable uCompletable = (p0.b == yp6.m0)? this.l.d(p0, false): tk0.a;
       return Completable.u(this.x(this.w(p0.toString()))).c(uCompletable);
    }
    public final Observable z(aq6 p0){
       String str = p0.toString();
       return this.I.filter(new rp(18)).map(new xl6(17)).map(new c16(str, 10, new s05(new r05(str, o05.z), ys5.v))).distinctUntilChanged();
    }
}
